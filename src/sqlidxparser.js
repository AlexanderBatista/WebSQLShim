/* parser generated by jison 0.4.15 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[7,8],$V1=[1,4],$V2=[1,16],$V3=[1,30],$V4=[1,32],$V5=[1,33],$V6=[1,34],$V7=[1,35],$V8=[1,50],$V9=[1,51],$Va=[1,37],$Vb=[1,45],$Vc=[1,52],$Vd=[1,39],$Ve=[1,40],$Vf=[1,41],$Vg=[1,42],$Vh=[1,43],$Vi=[1,44],$Vj=[1,46],$Vk=[1,48],$Vl=[1,49],$Vm=[1,59],$Vn=[2,63],$Vo=[1,67],$Vp=[44,125,143],$Vq=[2,194],$Vr=[1,89],$Vs=[7,8,53],$Vt=[7,8,79,160],$Vu=[2,209],$Vv=[1,95],$Vw=[7,8,65],$Vx=[1,97],$Vy=[7,8,52,54,61,77,83,86,108,145,153,155,160,162,174,188,199],$Vz=[2,67],$VA=[1,105],$VB=[2,167],$VC=[1,114],$VD=[7,8,177],$VE=[7,8,79,160,162,190],$VF=[7,8,79],$VG=[2,211],$VH=[1,131],$VI=[1,136],$VJ=[7,8,86,160,162,199],$VK=[1,174],$VL=[1,176],$VM=[7,8,76],$VN=[7,8,160,162],$VO=[2,72],$VP=[1,203],$VQ=[7,8,131,132,133,135,136,137],$VR=[7,8,61],$VS=[108,155,174,188],$VT=[1,217],$VU=[7,8,79,85,160],$VV=[2,101],$VW=[1,219],$VX=[1,220],$VY=[135,136,137],$VZ=[2,157],$V_=[1,242],$V$=[1,243],$V01=[1,251],$V11=[7,8,85,86,160,162],$V21=[7,8,76,79,81,83,85,99,101,107,108,110,111,114,160],$V31=[1,264],$V41=[76,79,85],$V51=[7,8,79,85],$V61=[1,271],$V71=[1,270],$V81=[1,267],$V91=[1,269],$Va1=[1,272],$Vb1=[1,273],$Vc1=[1,274],$Vd1=[1,275],$Ve1=[7,8,79,81,83,85,99,101,107,108,110,111],$Vf1=[4,7,8,77,79,81,83,85,99,101,107,108,110,111],$Vg1=[2,116],$Vh1=[1,307],$Vi1=[79,85],$Vj1=[85,135],$Vk1=[1,342],$Vl1=[1,339],$Vm1=[1,341],$Vn1=[1,343],$Vo1=[1,344],$Vp1=[7,8,79,81,83,85,99,101,107,108,110,111,114],$Vq1=[72,155,168,188];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"name":3,"LITERAL":4,"main":5,"sql_stmt_list":6,"EOF":7,"SEMICOLON":8,"sql_stmt":9,"sql_stmt_explain":10,"sql_stmt_stmt":11,"alter_table_stmt":12,"analyze_stmt":13,"attach_stmt":14,"begin_stmt":15,"commit_stmt":16,"create_index_stmt":17,"create_table_stmt":18,"create_trigger_stmt":19,"create_view_stmt":20,"create_virtual_table_stmt":21,"delete_stmt":22,"delete_stmt_limited":23,"detach_stmt":24,"drop_index_stmt":25,"drop_table_stmt":26,"drop_trigger_stmt":27,"drop_view_stmt":28,"insert_stmt":29,"pragma_stmt":30,"reindex_stmt":31,"release_stmt":32,"rollback_stmt":33,"savepoint_stmt":34,"select_stmt":35,"update_stmt":36,"update_stmt_limited":37,"vacuum_stmt":38,"explain_stmt":39,"EXPLAIN":40,"QUERY":41,"PLAN":42,"ALTER":43,"TABLE":44,"database_table_name":45,"alter_table_action":46,"DOT":47,"database_pragma_name":48,"database_index_name":49,"database_trigger_name":50,"database_view_name":51,"RENAME":52,"TO":53,"ADD":54,"COLUMN":55,"column_def":56,"ANALYZE":57,"ATTACH":58,"database":59,"expr":60,"AS":61,"DATABASE":62,"BEGIN":63,"deferred_exclusive":64,"TRANSACTION":65,"DEFERRED":66,"IMMEDIATE":67,"EXCLUSIVE":68,"commit":69,"transaction":70,"COMMIT":71,"END":72,"CREATE":73,"INDEX":74,"if_not_exists":75,"ON":76,"LPAR":77,"columns":78,"RPAR":79,"where":80,"UNIQUE":81,"IF":82,"NOT":83,"EXISTS":84,"COMMA":85,"WHERE":86,"temporary":87,"column_defs":88,"table_constraints":89,"without_rowid":90,"WITHOUT":91,"ROWID":92,"TEMPORARY":93,"type_name":94,"column_constraints":95,"names":96,"signed_number":97,"column_constraint":98,"CONSTRAINT":99,"col_constraint":100,"PRIMARY":101,"KEY":102,"asc_desc":103,"conflict_clause":104,"autoincrement":105,"NULL":106,"CHECK":107,"DEFAULT":108,"name_value":109,"COLLATE":110,"foreign_key_clause":111,"ASC":112,"DESC":113,"AUTOINCREMENT":114,"tab_constraints":115,"table_constraint":116,"tab_constraint":117,"FOREIGN":118,"CONFLICT":119,"ROLLBACK":120,"ABORT":121,"FAIL":122,"IGNORE":123,"REPLACE":124,"TRIGGER":125,"before_after":126,"delete_insert_update":127,"for_each_row":128,"when":129,"begin_trigger_end":130,"BEFORE":131,"AFTER":132,"INSTEAD":133,"OF":134,"DELETE":135,"INSERT":136,"UPDATE":137,"FOR":138,"EACH":139,"ROW":140,"uids_stmts":141,"uids_stmt":142,"VIEW":143,"VIRTUAL":144,"USING":145,"module_arguments_par":146,"module_arguments":147,"module_argument":148,"with_clause":149,"FROM":150,"qualified_table_name":151,"limit_clause":152,"INDEXED":153,"BY":154,"WITH":155,"recursive":156,"cte_tables":157,"RECURSIVE":158,"cte_table_name":159,"LIMIT":160,"offset":161,"ORDER":162,"ordering_terms":163,"ordering_term":164,"DETACH":165,"DROP":166,"if_exists":167,"with":168,"insert_action":169,"INTO":170,"columns_par":171,"insert_values":172,"OR":173,"VALUES":174,"values_list":175,"PRAGMA":176,"EQ":177,"pragma_value":178,"string_literal":179,"REINDEX":180,"RELEASE":181,"savepoint":182,"SAVEPOINT":183,"with_select":184,"compound_selects":185,"order_select":186,"limit_select":187,"compound_select":188,"common_table_expressions":189,"compount_operator":190,"select":191,"compound_operator":192,"UNION":193,"ALL":194,"INTERSECT":195,"EXCEPT":196,"OFFSET":197,"update_action":198,"SET":199,"column_expr_list":200,"column_expr":201,"VACUUM":202,"$accept":0,"$end":1},
terminals_: {2:"error",4:"LITERAL",7:"EOF",8:"SEMICOLON",10:"sql_stmt_explain",11:"sql_stmt_stmt",23:"delete_stmt_limited",37:"update_stmt_limited",40:"EXPLAIN",41:"QUERY",42:"PLAN",43:"ALTER",44:"TABLE",47:"DOT",52:"RENAME",53:"TO",54:"ADD",55:"COLUMN",57:"ANALYZE",58:"ATTACH",60:"expr",61:"AS",62:"DATABASE",63:"BEGIN",65:"TRANSACTION",66:"DEFERRED",67:"IMMEDIATE",68:"EXCLUSIVE",71:"COMMIT",72:"END",73:"CREATE",74:"INDEX",76:"ON",77:"LPAR",79:"RPAR",81:"UNIQUE",82:"IF",83:"NOT",84:"EXISTS",85:"COMMA",86:"WHERE",91:"WITHOUT",92:"ROWID",93:"TEMPORARY",97:"signed_number",99:"CONSTRAINT",101:"PRIMARY",102:"KEY",106:"NULL",107:"CHECK",108:"DEFAULT",109:"name_value",110:"COLLATE",111:"foreign_key_clause",112:"ASC",113:"DESC",114:"AUTOINCREMENT",118:"FOREIGN",119:"CONFLICT",120:"ROLLBACK",121:"ABORT",122:"FAIL",123:"IGNORE",124:"REPLACE",125:"TRIGGER",129:"when",131:"BEFORE",132:"AFTER",133:"INSTEAD",134:"OF",135:"DELETE",136:"INSERT",137:"UPDATE",138:"FOR",139:"EACH",140:"ROW",143:"VIEW",144:"VIRTUAL",145:"USING",148:"module_argument",150:"FROM",153:"INDEXED",154:"BY",155:"WITH",158:"RECURSIVE",160:"LIMIT",161:"offset",162:"ORDER",165:"DETACH",166:"DROP",168:"with",170:"INTO",173:"OR",174:"VALUES",175:"values_list",176:"PRAGMA",177:"EQ",179:"string_literal",180:"REINDEX",181:"RELEASE",183:"SAVEPOINT",188:"compound_select",189:"common_table_expressions",190:"compount_operator",191:"select",193:"UNION",194:"ALL",195:"INTERSECT",196:"EXCEPT",197:"OFFSET",199:"SET",202:"VACUUM"},
productions_: [0,[3,1],[5,2],[6,3],[6,1],[6,0],[9,2],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[39,0],[39,1],[39,3],[12,4],[45,3],[45,1],[48,3],[48,1],[49,3],[49,1],[50,3],[50,1],[51,3],[51,1],[46,3],[46,3],[46,2],[13,2],[14,5],[59,0],[59,1],[15,3],[64,0],[64,1],[64,1],[64,1],[16,2],[69,1],[69,1],[70,0],[70,1],[17,10],[17,11],[75,0],[75,3],[78,3],[78,1],[80,2],[80,0],[18,7],[18,10],[90,0],[90,2],[87,0],[87,1],[88,3],[88,1],[56,3],[56,2],[94,1],[94,4],[94,6],[96,2],[96,1],[95,2],[95,1],[98,3],[98,1],[100,5],[100,3],[100,2],[100,4],[100,2],[100,2],[100,4],[100,2],[100,1],[103,0],[103,1],[103,1],[105,0],[105,1],[89,0],[89,2],[115,3],[115,1],[116,3],[116,1],[117,6],[117,5],[117,4],[117,6],[104,0],[104,3],[104,3],[104,3],[104,3],[104,3],[19,12],[126,0],[126,1],[126,1],[126,2],[127,1],[127,1],[127,1],[127,3],[128,0],[128,3],[130,3],[141,3],[141,2],[142,1],[142,1],[142,1],[142,1],[20,7],[21,8],[146,0],[146,3],[147,3],[147,1],[22,6],[151,1],[151,4],[151,3],[149,3],[156,1],[156,0],[157,5],[157,7],[159,1],[159,4],[152,0],[152,3],[152,6],[163,3],[163,1],[164,2],[24,2],[24,3],[25,4],[167,2],[167,0],[26,4],[27,4],[28,4],[29,6],[169,1],[169,1],[169,3],[169,3],[169,3],[169,3],[169,3],[172,2],[172,1],[172,2],[171,0],[171,3],[30,2],[30,4],[30,6],[178,1],[178,1],[178,1],[31,1],[31,2],[31,4],[32,3],[182,0],[182,1],[33,5],[33,2],[34,2],[35,4],[35,3],[184,2],[184,3],[185,3],[185,1],[192,1],[192,2],[192,1],[192,1],[186,0],[186,3],[187,0],[187,2],[187,4],[187,4],[36,7],[198,1],[198,3],[198,3],[198,3],[198,3],[198,3],[200,3],[200,1],[201,3],[38,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: case 91: case 107: case 111: case 136: case 137: case 138: case 139: case 147:
 this.$ = $$[$0]; 
break;
case 2:
 this.$ = $$[$0-1]; 
			console.log(this.$);
		
break;
case 3: case 69: case 79: case 108: case 144: case 160: case 222:
 this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 4: case 70: case 80: case 89: case 135: case 145: case 161: case 223:
 this.$ = [$$[$0]]; 
break;
case 5: case 34: case 56: case 67: case 75: case 77: case 101: case 104: case 106: case 116: case 123: case 131: case 142: case 152: case 157: case 167: case 182:
 this.$ = undefined; 
break;
case 6:
 this.$ = $$[$0]; yy.extend(this.$, $$[$0-1]); 
break;
case 35: case 36:
 this.$ = {explain:true}; 
break;
case 37:
 this.$ = {statement: 'ALTER TABLE'}; 
		yy.extend(this.$, $$[$0-1]); yy.extend(this.$, $$[$0]);  
break;
case 38:
 this.$ = {database:$$[$0-2], table:$$[$0]}; 
break;
case 39:
 this.$ = {table:$$[$0]}; 
break;
case 40:
 this.$ = {database:$$[$0-2], pragma:$$[$0]}; 
break;
case 41:
 this.$ = {pragma:$$[$0]}; 
break;
case 42:
 this.$ = {database:$$[$0-2], index:$$[$0]}; 
break;
case 43:
 this.$ = {index:$$[$0]}; 
break;
case 44:
 this.$ = {database:$$[$0-2], trigger:$$[$0]}; 
break;
case 45:
 this.$ = {trigger:$$[$0]}; 
break;
case 46:
 this.$ = {database:$$[$0-2], view:$$[$0]}; 
break;
case 47:
 this.$ = {view:$$[$0]}; 
break;
case 48:
 this.$ = {action: 'RENAME TO', new_table:$$[$0]}; 
break;
case 49:
 this.$ = {action: 'ADD COLUMN', column_def:$$[$0]}; 
break;
case 50:
 this.$ = {action: 'ADD COLUMN', column_def:$$[$01]}; 
break;
case 51:
 this.$ = {statement: 'ANALYZE'}; yy.extend(this.$, $$[$0]); 
break;
case 52:
 this.$ = {statement: 'ATTACH', expr: $$[$0-2], database:$$[$0]}; 
break;
case 55:
 this.$ = {statement: 'BEGIN TRANSACTION', type: $$[$0-1]}; 
break;
case 57:
 this.$ = 'DEFERRED'; 
break;
case 58:
 this.$ = 'IMMEDIATE'; 
break;
case 59:
 this.$ = 'EXCLUSIVE'; 
break;
case 60:
 this.$ = {statement: 'COMMIT TRANSACTION'}; 
break;
case 65:
 this.$ = {statement: 'CREATE INDEX', table:$$[$0-4], columns:$$[$0-2] }; 
	    	yy.extend(this.$, $$[$0-7]); 
	    	yy.extend(this.$, $$[$0-6]); 
	    	yy.extend(this.$,$$[$0]);
	    
break;
case 66:
 this.$ = {statement: 'CREATE INDEX', unique:true, table:$$[$0-4], columns:$$[$0-2] }; 
	    	yy.extend(this.$, $$[$0-9]); 
	    	yy.extend(this.$, $$[$0-7]); 
	    	yy.extend(this.$, $$[$0-6]); 
	    	yy.extend(this.$,$$[$0]);
	    
break;
case 68:
 this.$ = {if_not_exists: true}; 
break;
case 71:
 this.$ = {where: $$[$0]}; 
break;
case 73:
 this.$ = {statement: 'CREATE TABLE', select:$$[$0]};
			yy.extend(this.$,$$[$0-5]);
			yy.extend(this.$,$$[$0-3]);
			yy.extend(this.$,$$[$0-2]);
		
break;
case 74:
 this.$ = {statement: 'CREATE TABLE', column_defs: $$[$0-3], table_constraints:$$[$0-2] };
			yy.extend(this.$,$$[$0-8]);
			yy.extend(this.$,$$[$0-6]);
			yy.extend(this.$,$$[$0-5]);
			yy.extend(this.$,$$[$0]);
		
break;
case 76:
 this.$ = {without_rowid: true} 
break;
case 78:
 this.$ = {temporary:true}; 
break;
case 81:
 this.$ = {column:$$[$0-2], constraints: $$[$0]}; yy.extend(this.$,$$[$0-1]); 
break;
case 82:
 this.$ = {column:$$[$0-1]}; yy.extend(this.$,$$[$0]); 
break;
case 83:
 this.$ = {type: $$[$0]}; 
break;
case 84:
 this.$ = {type: $$[$0-3], precision: $$[$0-1]}; 
break;
case 85:
 this.$ = {type: $$[$0-5], precision: $$[$0-3], scale:$$[$0-1]}; 
break;
case 86:
 this.$ = $$[$0-1]+' '+$$[$0]; 
break;
case 87:
 this.$ =$$[$0]; 
break;
case 88:
 this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 90: case 110:
 this.$ = {constraint: $$[$0-1]}; yy.extend(this.$,$$[$0]); 
break;
case 92:
 this.$ = {type: 'PRIMARY KEY'}; yy.extend(this.$,$$[$0-2]); 
			yy.extend(this.$,$$[$0-1]); yy.extend(this.$,$$[$0]); 
break;
case 93:
 this.$ = {type: 'NOT NULL'}; yy.extend(this.$,$$[$0]); 
break;
case 94:
 this.$ = {type: 'UNIQUE'}; yy.extend(this.$,$$[$0]); 
break;
case 95:
 this.$ = {type: 'CHECK', expr: $$[$0-1]}; 
break;
case 96:
 this.$ = {type: 'DEFAULT', number: $$[$0]}; 
break;
case 97:
 this.$ = {type: 'DEFAULT', value: $$[$0]}; 
break;
case 98:
 this.$ = {type: 'DEFAULT', expr: $$[$0-1]}; 
break;
case 99:
 this.$ = {type: 'COLLATE', collate: $$[$0]}; 
break;
case 100:
 this.$ = {type: 'FOREIGN KEY'}; yy.extend(this.$,$$[$0]); 
break;
case 102:
 this.$ = {order:'ASC'}; 
break;
case 103:
 this.$ = {order:'DESC'}; 
break;
case 105:
 this.$ = {autoincrement:true}; 
break;
case 109:
 this.$ = [$$[$01]]; 
break;
case 112:
 this.$ = {type:'PRIMARY KEY', columns: $$[$0-2]}; yy.extend(this.$,$$[$0]); 
break;
case 113:
 this.$ = {type:'UNIQUE', columns: $$[$0-2]}; yy.extend(this.$,$$[$0]); 
break;
case 114:
 this.$ = {type:'CHECK', expr: $$[$0-1]}; 
break;
case 115:
 this.$ = {type:'FOREIGN KEY', columns: $$[$0-2]}; yy.extend(this.$, $$[$0]); 
break;
case 117:
 this.$ = {conflict: 'ROLLBACK'}; 
break;
case 118:
 this.$ = {conflict: 'ABORT'}; 
break;
case 119:
 this.$ = {conflict: 'FAIL'}; 
break;
case 120:
 this.$ = {conflict: 'IGNORE'}; 
break;
case 121:
 this.$ = {conflict: 'REPLACE'}; 
break;
case 122:

			this.$ = {statement: 'CREATE TRIGGER', table:$$[$0-3]};
			yy.extend(this.$,$$[$0-10]);
			yy.extend(this.$,$$[$0-8]);
			yy.extend(this.$,$$[$0-7]);
			yy.extend(this.$,$$[$0-6]);
			yy.extend(this.$,$$[$0-5]);
			yy.extend(this.$,$$[$0-2]);
			yy.extend(this.$,$$[$0-1]);
			yy.extend(this.$,$$[$0]);
		
break;
case 124:
 this.$ = {when: 'BEFORE'}; 
break;
case 125:
 this.$ = {when: 'AFTER'}; 
break;
case 126:
 this.$ = {when: 'INSTEAD OF'}; 
break;
case 127:
 this.$ = {action: 'DELETE'}; 
break;
case 128:
 this.$ = {action: 'INSERT'}; 
break;
case 129:
 this.$ = {action: 'UPDATE'}; 
break;
case 130:
 this.$ = {action: 'UPDATE', columns: $$[$0]}; 
break;
case 132:
 this.$ = {for_each_row: true}; 
break;
case 133:
 this.$ = {stmts: $$[$0-1]}; 
break;
case 134:
 this.$ = $$[$0-2]; this.$.push($$[$0-1]); 
break;
case 140:
 
			this.$ = {statement: 'CREATE VIEW', select: $$[$0]}; 
			yy.extend(this.$,$$[$0-5]); 
			yy.extend(this.$,$$[$0-3]); 
			yy.extend(this.$,$$[$0-2]); 
		
break;
case 141:
 
			this.$ = {statement: 'CREATE VIRTUAL TABLE', module: $$[$0-1]}; 
			yy.extend(this.$,$$[$0-4]); 
			yy.extend(this.$,$$[$0-3]); 
			yy.extend(this.$,$$[$0]); 
		
break;
case 143:
 this.$ = {module_arguments: $$[$0-1]}; 
break;
case 146:
 
			this.$ = {statement:'DELETE'};
			yy.extend(this.$,$$[$0-5]);
			yy.extend(this.$,$$[$0-2]);
			yy.extend(this.$,$$[$0-1]);
		
break;
case 148:
 this.$ = $$[$0-3]; yy.extend(this.$, {indexed_by:$$[$0]}); 
break;
case 149:
 this.$ = $$[$0-2]; yy.extend(this.$, {not_indexed:true}); 
break;
case 150:
 this.$ = {with: $$[$0]}; yy.extend(this.$,$$[$0-1]); 
break;
case 151:
 this.$ = {recursive:true}; 
break;
case 153:
 	
			yy.extend($$[$0-4], {select:$$[$0-1]});
			this.$ = [$$[$0-4]];
		
break;
case 154:

			yy.extend($$[$0-4], {select:$$[$0-1]});		
			this.$ = $$[$0-6];
			this.$.push($$[$0-4]);
		
break;
case 155:
 this.$ = {table: $$[$0]}; 
break;
case 156:
 this.$ = {table:$$[$0-3], columns: $$[$0-1]}
break;
case 158:
 
			this.$ = {limit:$$[$0-1]};
			yy.extend(this.$, $$[$0]);
		
break;
case 159:
 
			this.$ = {order:$$[$0-3], limit:$$[$0-1]};
			yy.extend(this.$, $$[$0]);
		
break;
case 162:
 
			this.$ = {term: $$[$0-1]}; 
			yy.extend(this.$, $$[$0]);
		
break;
case 163:
 this.$ = {statement:'DETACH', database:$$[$01]}; 
break;
case 164:
 this.$ = {statement:'DETACH', database:$$[$0]}; 
break;
case 165:
 
			this.$ = {statement: 'DROP INDEX'}; 
			yy.extend(this.$,$$[$0-1]);
			yy.extend(this.$,$$[$0]);
		
break;
case 166:
 this.$ = {if_exists:true}; 
break;
case 168:
 
			this.$ = {statement: 'DROP TABLE'}; 
			yy.extend(this.$,$$[$0-1]);
			yy.extend(this.$,$$[$0]);
		
break;
case 169:
 
			this.$ = {statement: 'DROP TRIGGER'}; 
			yy.extend(this.$,$$[$0-1]);
			yy.extend(this.$,$$[$0]);
		
break;
case 170:
 
			this.$ = {statement: 'DROP VIEW'}; 
			yy.extend(this.$,$$[$0-1]);
			yy.extend(this.$,$$[$0]);
		
break;
case 171:
 
			this.$ = {statement: 'INSERT', action: $$[$0-4]};
			yy.extend(this.$,$$[$0-5]);
			yy.extend(this.$,$$[$0-2]);
			yy.extend(this.$,$$[$0-1]);
			yy.extend(this.$,$$[$0]);
		
break;
case 172:
 this.$ = 'INSERT'; 
break;
case 173:
 this.$ = 'REPLACE'; 
break;
case 174:
 this.$ = 'INSERT OR REPLACE'; 
break;
case 175:
 this.$ = 'INSERT OR ROLLBACK'; 
break;
case 176:
 this.$ = 'INSERT OR ABORT'; 
break;
case 177:
 this.$ = 'INSERT OR FAIL'; 
break;
case 178:
 this.$ = 'INSERT OR IGNORE'; 
break;
case 179:
 this.$ = {values: $$[$0]}; 
break;
case 180:
 this.$ = {select:$$[$0]}; 
break;
case 181:
 this.$ = {default_values: true}; 
break;
case 183:
 this.$ = {columns: $$[$0-1]}
break;
case 184:
 this.$ = {statement: 'PRAGMA'}; yy.extend(this.$,$$[$0-1]); 
break;
case 185:
 this.$ = {statement: 'PRAGMA', value:$$[$0]}; yy.extend(this.$,$$[$0-3]); 
break;
case 186:
 this.$ = {statement: 'PRAGMA', value:$$[$0-1]}; yy.extend(this.$,$$[$0-5]); 
break;
case 187:
 this.$ = {number: $$[$0]}; 
break;
case 188:
 this.$ = {name: $$[$0]}; 
break;
case 189:
 this.$ = {string: $$[$0]}; 
break;
case 190:
 this.$ = {statement: 'REINDEX'}; 
break;
case 191:
 this.$ = {statement: 'REINDEX', name: $$[$0]}; 
break;
case 192:
 this.$ = {statement: 'REINDEX', database: $$[$0-2], name: $$[$0-2]}; 
break;
case 193:
 this.$ = {statement: 'RELEASE SAVEPOINT', savepoint: $$[$0]}; 
break;
case 196:
 this.$ = {statement: 'ROLLBACK TRANSACTION', savepoint: $$[$0-2]}; 
break;
case 197:
 this.$ = {statement: 'ROLLBACK TRANSACTION'}; 
break;
case 198:
 this.$ = {statement: 'SAVEPOINT', savepoint: $$[$01]}; 
break;
case 215:
 
			this.$ = {statement: 'UPDATE', action: $$[$0-5], set: $$[$0-2]};
			yy.extend(this.$,$$[$0-6]);
			yy.extend(this.$,$$[$0-4]);
			yy.extend(this.$,$$[$0-1]);
		
break;
case 216:
 this.$ = 'UPDATE'
break;
case 217:
 this.$ = 'UPDATE OR ROLLBACK'
break;
case 218:
 this.$ = 'UPDATE OR ABORT'
break;
case 219:
 this.$ = 'UPDATE OR REPLACE'
break;
case 220:
 this.$ = 'UPDATE OR FAIL'
break;
case 221:
 this.$ = 'UPDATE OR IGNORE'
break;
case 224:
 this.$ = {column:$$[$0-2], expr: $$[$0]}; 
break;
case 225:
 this.$ = {statement: 'VACUUM'}; 
break;
}
},
table: [o($V0,[2,5],{5:1,6:2,9:3,12:5,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:15,24:17,25:18,26:19,27:20,28:21,29:22,30:23,31:24,32:25,33:26,34:27,35:28,36:29,38:31,69:36,149:38,184:47,10:$V1,23:$V2,37:$V3,43:$V4,57:$V5,58:$V6,63:$V7,71:$V8,72:$V9,73:$Va,120:$Vb,155:$Vc,165:$Vd,166:$Ve,168:$Vf,176:$Vg,180:$Vh,181:$Vi,183:$Vj,188:$Vk,202:$Vl}),{1:[3]},{7:[1,53],8:[1,54]},o($V0,[2,4]),{11:[1,55]},o($V0,[2,7]),o($V0,[2,8]),o($V0,[2,9]),o($V0,[2,10]),o($V0,[2,11]),o($V0,[2,12]),o($V0,[2,13]),o($V0,[2,14]),o($V0,[2,15]),o($V0,[2,16]),o($V0,[2,17]),o($V0,[2,18]),o($V0,[2,19]),o($V0,[2,20]),o($V0,[2,21]),o($V0,[2,22]),o($V0,[2,23]),o($V0,[2,24]),o($V0,[2,25]),o($V0,[2,26]),o($V0,[2,27]),o($V0,[2,28]),o($V0,[2,29]),o($V0,[2,30]),o($V0,[2,31]),o($V0,[2,32]),o($V0,[2,33]),{44:[1,56]},{3:58,4:$Vm,45:57},{59:60,60:[2,53],62:[1,61]},{64:62,65:[2,56],66:[1,63],67:[1,64],68:[1,65]},o($V0,$Vn,{70:66,65:$Vo}),o($Vp,[2,77],{87:70,74:[1,68],81:[1,69],93:[1,72],144:[1,71]}),{135:[1,73]},{3:74,4:$Vm,62:[1,75]},{44:[1,77],74:[1,76],125:[1,78],143:[1,79]},{124:[1,83],136:[1,82],137:[1,84],169:80,198:81},{3:86,4:$Vm,48:85},o($V0,[2,190],{3:87,4:$Vm}),{4:$Vq,182:88,183:$Vr},o($Vs,$Vn,{70:90,65:$Vo}),{3:91,4:$Vm},{185:92,191:[1,93]},o($Vt,$Vu,{186:94,162:$Vv}),o($V0,[2,225]),o($Vw,[2,61]),o($Vw,[2,62]),{4:[2,152],156:96,158:[1,98],189:$Vx},{1:[2,2]},{9:99,10:$V1,12:5,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:$V2,24:17,25:18,26:19,27:20,28:21,29:22,30:23,31:24,32:25,33:26,34:27,35:28,36:29,37:$V3,38:31,43:$V4,57:$V5,58:$V6,63:$V7,69:36,71:$V8,72:$V9,73:$Va,120:$Vb,149:38,155:$Vc,165:$Vd,166:$Ve,168:$Vf,176:$Vg,180:$Vh,181:$Vi,183:$Vj,184:47,188:$Vk,202:$Vl},o($V0,[2,6]),{3:58,4:$Vm,45:100},o($V0,[2,51]),o($Vy,[2,39],{47:[1,101]}),o([4,7,8,47,52,54,61,76,77,79,81,83,85,86,99,101,107,108,110,111,112,113,118,129,131,132,133,135,136,137,138,145,153,155,160,162,174,177,188,199],[2,1]),{60:[1,102]},{60:[2,54]},{65:[1,103]},{65:[2,57]},{65:[2,58]},{65:[2,59]},o($V0,[2,60]),o($Vs,[2,64]),{4:$Vz,75:104,82:$VA},{74:[1,106]},{44:[1,107],125:[1,108],143:[1,109]},{44:[1,110]},o($Vp,[2,78]),{150:[1,111]},o($V0,[2,163]),{3:112,4:$Vm},{4:$VB,82:$VC,167:113},{4:$VB,82:$VC,167:115},{4:$VB,82:$VC,167:116},{4:$VB,82:$VC,167:117},{170:[1,118]},{3:58,4:$Vm,45:120,151:119},{170:[2,172],173:[1,121]},{170:[2,173]},{4:[2,216],173:[1,122]},o($V0,[2,184],{177:[1,123]}),o($VD,[2,41],{47:[1,124]}),o($V0,[2,191],{47:[1,125]}),{3:126,4:$Vm},{4:[2,195]},o($V0,[2,197],{53:[1,127]}),o($V0,[2,198]),o($Vt,$Vu,{186:128,162:$Vv,190:[1,129]}),o($VE,[2,204]),o($VF,$VG,{187:130,160:$VH}),{154:[1,132]},{3:135,4:$Vm,157:133,159:134},{191:[2,201]},{4:[2,151],189:$VI},o($V0,[2,3]),{46:137,52:[1,138],54:[1,139]},{3:140,4:$Vm},{61:[1,141]},o($V0,[2,55]),{3:143,4:$Vm,49:142},{83:[1,144]},{4:$Vz,75:145,82:$VA},{4:$Vz,75:146,82:$VA},{4:$Vz,75:147,82:$VA},{4:$Vz,75:148,82:$VA},{4:$Vz,75:149,82:$VA},{3:58,4:$Vm,45:120,151:150},o($V0,[2,164]),{3:143,4:$Vm,49:151},{84:[1,152]},{3:58,4:$Vm,45:153},{3:155,4:$Vm,50:154},{3:157,4:$Vm,51:156},{3:58,4:$Vm,45:158},{199:[1,159]},o($VJ,[2,147],{83:[1,161],153:[1,160]}),{120:[1,163],121:[1,164],122:[1,165],123:[1,166],124:[1,162]},{120:[1,167],121:[1,168],122:[1,170],123:[1,171],124:[1,169]},{3:175,4:$Vm,77:[1,173],97:$VK,178:172,179:$VL},{3:177,4:$Vm},{3:178,4:$Vm},o($V0,[2,193]),{4:$Vq,182:179,183:$Vr},o($VF,$VG,{187:180,160:$VH}),{191:[1,181]},o($VF,[2,200]),{60:[1,182]},{3:185,4:$Vm,163:183,164:184},{85:[1,186],135:[2,150]},{61:[1,187]},{61:[2,155],77:[1,188]},{191:[2,202]},o($V0,[2,37]),{53:[1,189]},{3:192,4:$Vm,55:[1,190],56:191},o($Vy,[2,38]),{3:193,4:$Vm},{76:[1,194]},o($VM,[2,43],{47:[1,195]}),{84:[1,196]},{3:143,4:$Vm,49:197},{3:58,4:$Vm,45:198},{3:155,4:$Vm,50:199},{3:157,4:$Vm,51:200},{3:58,4:$Vm,45:201},o($VN,$VO,{80:202,86:$VP}),o($V0,[2,165]),{4:[2,166]},o($V0,[2,168]),o($V0,[2,169]),o($VQ,[2,45],{47:[1,204]}),o($V0,[2,170]),o($VR,[2,47],{47:[1,205]}),o($VS,[2,182],{171:206,77:[1,207]}),{3:210,4:$Vm,200:208,201:209},{154:[1,211]},{153:[1,212]},{170:[2,174]},{170:[2,175]},{170:[2,176]},{170:[2,177]},{170:[2,178]},{4:[2,217]},{4:[2,218]},{4:[2,219]},{4:[2,220]},{4:[2,221]},o($V0,[2,185]),{3:175,4:$Vm,97:$VK,178:213,179:$VL},o($VF,[2,187]),o($VF,[2,188]),o($VF,[2,189]),o($VD,[2,40]),o($V0,[2,192]),{3:214,4:$Vm},o($VF,[2,199]),o($VE,[2,203]),o($VF,[2,212],{85:[1,216],197:[1,215]}),o($Vt,[2,210],{85:$VT}),o($VU,[2,161]),o($VU,$VV,{103:218,112:$VW,113:$VX}),{3:135,4:$Vm,159:221},{77:[1,222]},{3:224,4:$Vm,78:223},{3:225,4:$Vm},{3:192,4:$Vm,56:226},o($V0,[2,50]),{3:229,4:$Vm,94:227,96:228},o($V0,[2,52]),{3:230,4:$Vm},{3:231,4:$Vm},{4:[2,68]},{76:[1,232]},{61:[1,233],77:[1,234]},o($VY,[2,123],{126:235,131:[1,236],132:[1,237],133:[1,238]}),{61:[1,239]},{145:[1,240]},o($V0,$VZ,{152:241,160:$V_,162:$V$}),{60:[1,244]},{3:245,4:$Vm},{3:246,4:$Vm},{35:249,108:[1,250],155:$V01,172:247,174:[1,248],184:47,188:$Vk},{3:224,4:$Vm,78:252},o($VN,$VO,{80:253,85:[1,254],86:$VP}),o($V11,[2,223]),{177:[1,255]},{3:256,4:$Vm},o($VJ,[2,149]),{79:[1,257]},o($V0,[2,196]),{60:[1,258]},{60:[1,259]},{3:185,4:$Vm,164:260},o($VU,[2,162]),o($V21,[2,102]),o($V21,[2,103]),{61:[1,261]},{35:262,155:$V01,184:47,188:$Vk},{79:[1,263],85:$V31},o($V41,[2,70]),o($V0,[2,48]),o($V0,[2,49]),o($V51,[2,82],{95:265,98:266,100:268,81:$V61,83:$V71,99:$V81,101:$V91,107:$Va1,108:$Vb1,110:$Vc1,111:$Vd1}),o($Ve1,[2,83],{3:277,4:$Vm,77:[1,276]}),o($Vf1,[2,87]),{77:[1,278]},o($VM,[2,42]),{3:279,4:$Vm},{35:280,155:$V01,184:47,188:$Vk},{3:192,4:$Vm,56:282,88:281},{127:283,135:[1,284],136:[1,285],137:[1,286]},o($VY,[2,124]),o($VY,[2,125]),{134:[1,287]},{35:288,155:$V01,184:47,188:$Vk},{3:289,4:$Vm},o($V0,[2,146]),{60:[1,290]},{154:[1,291]},o($VN,[2,71]),o($VQ,[2,44]),o($VR,[2,46]),o($V0,[2,171]),{175:[1,292]},o($V0,[2,180]),{174:[1,293]},{158:[1,294],189:$Vx},{79:[1,295],85:$V31},o($V0,$VZ,{152:296,160:$V_,162:$V$}),{3:210,4:$Vm,201:297},{60:[1,298]},o($VJ,[2,148]),o($V0,[2,186]),o($VF,[2,213]),o($VF,[2,214]),o($VU,[2,160]),{77:[1,299]},{79:[1,300]},{61:[2,156]},{3:301,4:$Vm},o($V51,[2,81],{100:268,98:302,81:$V61,83:$V71,99:$V81,101:$V91,107:$Va1,108:$Vb1,110:$Vc1,111:$Vd1}),o($Ve1,[2,89]),{3:303,4:$Vm},o($Ve1,[2,91]),{102:[1,304]},{106:[1,305]},o($Ve1,$Vg1,{104:306,76:$Vh1}),{77:[1,308]},{77:[1,311],97:[1,309],109:[1,310]},{3:312,4:$Vm},o($Ve1,[2,100]),{97:[1,313]},o($Vf1,[2,86]),{3:224,4:$Vm,78:314},{77:[1,315]},o($V0,[2,73]),{79:[2,106],85:[1,317],89:316},o($Vi1,[2,80]),{76:[1,318]},{76:[2,127]},{76:[2,128]},{76:[2,129],134:[1,319]},o($VY,[2,126]),o($V0,[2,140]),o($V0,[2,142],{146:320,77:[1,321]}),{161:[1,322]},{3:185,4:$Vm,163:323,164:184},o($V0,[2,179]),o($V0,[2,181]),{189:$VI},o($VS,[2,183]),o($V0,[2,215]),o($V11,[2,222]),o($V11,[2,224]),{35:324,155:$V01,184:47,188:$Vk},o($Vj1,[2,153]),o($V41,[2,69]),o($Ve1,[2,88]),{81:$V61,83:$V71,100:325,101:$V91,107:$Va1,108:$Vb1,110:$Vc1,111:$Vd1},o([7,8,76,79,81,83,85,99,101,107,108,110,111,114],$VV,{103:326,112:$VW,113:$VX}),o($Ve1,$Vg1,{104:327,76:$Vh1}),o($Ve1,[2,94]),{119:[1,328]},{60:[1,329]},o($Ve1,[2,96]),o($Ve1,[2,97]),{60:[1,330]},o($Ve1,[2,99]),{79:[1,331],85:[1,332]},{79:[1,333],85:$V31},{3:224,4:$Vm,78:334},{79:[1,335]},{3:192,4:$Vm,56:336,81:$Vk1,99:$Vl1,101:$Vm1,107:$Vn1,115:337,116:338,117:340,118:$Vo1},{3:345,4:$Vm},{3:224,4:$Vm,78:346},o($V0,[2,141]),{147:347,148:[1,348]},o($V0,[2,158]),{85:$VT,160:[1,349]},{79:[1,350]},o($Ve1,[2,90]),o($Vp1,$Vg1,{104:351,76:$Vh1}),o($Ve1,[2,93]),{120:[1,352],121:[1,353],122:[1,354],123:[1,355],124:[1,356]},{79:[1,357]},{79:[1,358]},o($Ve1,[2,84]),{97:[1,359]},o($V0,$VO,{80:360,86:$VP}),{79:[1,361],85:$V31},o($V0,[2,75],{90:362,91:[1,363]}),o($Vi1,[2,79]),{79:[2,107],85:[1,364]},o($Vi1,[2,109]),{3:365,4:$Vm},o($Vi1,[2,111]),{102:[1,366]},{77:[1,367]},{77:[1,368]},{102:[1,369]},{128:370,129:[2,131],138:[1,371]},{76:[2,130],85:$V31},{79:[1,372],85:[1,373]},o($Vi1,[2,145]),{60:[1,374]},o($Vj1,[2,154]),o($Ve1,[2,104],{105:375,114:[1,376]}),o($Vp1,[2,117]),o($Vp1,[2,118]),o($Vp1,[2,119]),o($Vp1,[2,120]),o($Vp1,[2,121]),o($Ve1,[2,95]),o($Ve1,[2,98]),{79:[1,377]},o($V0,[2,65]),o($V0,$VO,{80:378,86:$VP}),o($V0,[2,74]),{92:[1,379]},{81:$Vk1,99:$Vl1,101:$Vm1,107:$Vn1,116:380,117:340,118:$Vo1},{81:$Vk1,101:$Vm1,107:$Vn1,117:381,118:$Vo1},{77:[1,382]},{3:224,4:$Vm,78:383},{60:[1,384]},{77:[1,385]},{129:[1,386]},{139:[1,387]},o($V0,[2,143]),{148:[1,388]},{161:[1,389]},o($Ve1,[2,92]),o($Ve1,[2,105]),o($Ve1,[2,85]),o($V0,[2,66]),o($V0,[2,76]),o($Vi1,[2,108]),o($Vi1,[2,110]),{3:224,4:$Vm,78:390},{79:[1,391],85:$V31},{79:[1,392]},{3:224,4:$Vm,78:393},{63:[1,395],130:394},{140:[1,396]},o($Vi1,[2,144]),o($V0,[2,159]),{79:[1,397],85:$V31},o($Vi1,$Vg1,{104:398,76:$Vh1}),o($Vi1,[2,114]),{79:[1,399],85:$V31},o($V0,[2,122]),{22:404,29:403,35:405,36:402,141:400,142:401,149:38,155:$Vc,168:$Vf,184:47,188:$Vk},{129:[2,132]},o($Vi1,$Vg1,{104:406,76:$Vh1}),o($Vi1,[2,113]),{111:[1,407]},{22:404,29:403,35:405,36:402,72:[1,408],142:409,149:38,155:$Vc,168:$Vf,184:47,188:$Vk},{8:[1,410]},{8:[2,136]},{8:[2,137]},{8:[2,138]},{8:[2,139]},o($Vi1,[2,112]),o($Vi1,[2,115]),o($V0,[2,133]),{8:[1,411]},o($Vq1,[2,135]),o($Vq1,[2,134])],
defaultActions: {53:[2,2],61:[2,54],63:[2,57],64:[2,58],65:[2,59],83:[2,173],89:[2,195],97:[2,201],136:[2,202],152:[2,166],162:[2,174],163:[2,175],164:[2,176],165:[2,177],166:[2,178],167:[2,217],168:[2,218],169:[2,219],170:[2,220],171:[2,221],196:[2,68],263:[2,156],284:[2,127],285:[2,128],396:[2,132],402:[2,136],403:[2,137],404:[2,138],405:[2,139]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        function lex() {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 'QLITERAL'
break;
case 1:return 'STRING'
break;
case 2:/* skip -- comments */
break;
case 3:/* skip whitespace */
break;
case 4:return 121
break;
case 5:return 'ACTION'
break;
case 6:return 54
break;
case 7:return 132
break;
case 8:return 194
break;
case 9:return 43
break;
case 10:return 57
break;
case 11:return 'AND'
break;
case 12:return 61
break;
case 13:return 112
break;
case 14:return 58
break;
case 15:return 114
break;
case 16:return 131
break;
case 17:return 63
break;
case 18:return 'BETWEEN'
break;
case 19:return 154
break;
case 20:return 'CASCADE'
break;
case 21:return 'CASE'
break;
case 22:return 'CAST'
break;
case 23:return 107
break;
case 24:return 110
break;
case 25:return 55
break;
case 26:return 71
break;
case 27:return 119
break;
case 28:return 99
break;
case 29:return 73
break;
case 30:return 'CROSS'
break;
case 31:return 'CURRENT DATE'
break;
case 32:return 'CURRENT TIME'
break;
case 33:return 'CURRENT TIMESTAMP'
break;
case 34:return 62
break;
case 35:return 108
break;
case 36:return 'DEFERRABLE'
break;
case 37:return 66
break;
case 38:return 135
break;
case 39:return 113
break;
case 40:return 165
break;
case 41:return 'DISTINCT'
break;
case 42:return 166
break;
case 43:return 139
break;
case 44:return 'ELSE'
break;
case 45:return 72
break;
case 46:return 'ESCAPE'
break;
case 47:return 196
break;
case 48:return 68
break;
case 49:return 84
break;
case 50:return 40
break;
case 51:return 122
break;
case 52:return 138
break;
case 53:return 118
break;
case 54:return 150
break;
case 55:return 'FULL'
break;
case 56:return 'GLOB'
break;
case 57:return 'GROUP'
break;
case 58:return 'HAVING'
break;
case 59:return 82
break;
case 60:return 123
break;
case 61:return 67
break;
case 62:return 'IN'
break;
case 63:return 74
break;
case 64:return 153
break;
case 65:return 'INITIALLY'
break;
case 66:return 'INNER'
break;
case 67:return 136
break;
case 68:return 133
break;
case 69:return 195
break;
case 70:return 170
break;
case 71:return 'IS'
break;
case 72:return 'ISNULL'
break;
case 73:return 'JOIN'
break;
case 74:return 102
break;
case 75:return 'LEFT'
break;
case 76:return 'LIKE'
break;
case 77:return 'LMIT'
break;
case 78:return 'MATCH'
break;
case 79:return 'NATURAL'
break;
case 80:return 'NO'
break;
case 81:return 83
break;
case 82:return 'NOTNULL'
break;
case 83:return 106
break;
case 84:return 134
break;
case 85:return 197
break;
case 86:return 76
break;
case 87:return 173
break;
case 88:return 162
break;
case 89:return 'OUTER'
break;
case 90:return 42
break;
case 91:return 176
break;
case 92:return 101
break;
case 93:return 41
break;
case 94:return 'RAISE'
break;
case 95:return 158
break;
case 96:return 'REFERENCES'
break;
case 97:return 'REGEXP'
break;
case 98:return 180
break;
case 99:return 181
break;
case 100:return 52
break;
case 101:return 124
break;
case 102:return 'RESTRICT'
break;
case 103:return 'RIGHT'
break;
case 104:return 120
break;
case 105:return 140
break;
case 106:return 183
break;
case 107:return 'SELECT'
break;
case 108:return 199
break;
case 109:return 44
break;
case 110:return 'TEMP'
break;
case 111:return 93
break;
case 112:return 'THEN'
break;
case 113:return 53
break;
case 114:return 65
break;
case 115:return 125
break;
case 116:return 193
break;
case 117:return 81
break;
case 118:return 137
break;
case 119:return 145
break;
case 120:return 202
break;
case 121:return 174
break;
case 122:return 143
break;
case 123:return 144
break;
case 124:return 'WHEN'
break;
case 125:return 86
break;
case 126:return 155
break;
case 127:return 91
break;
case 128:return 'NUMBER'
break;
case 129:return 'NUMBER'
break;
case 130:return 'PLUS'
break;
case 131:return 'MINUS'
break;
case 132:return 'STAR'
break;
case 133:return 'SLASH'
break;
case 134:return 'MODULO'
break;
case 135:return 'NE'
break;
case 136:return 'NE'
break;
case 137:return 'GE'
break;
case 138:return 'GT'
break;
case 139:return 'LE'
break;
case 140:return 'LT'
break;
case 141:return 177
break;
case 142:return 77
break;
case 143:return 79
break;
case 144:return 47
break;
case 145:return 85
break;
case 146:return 'COLON'
break;
case 147:return 8
break;
case 148:return 'DOLLAR'
break;
case 149:return 'QUESTION'
break;
case 150:return 'CARET'
break;
case 151:return 4
break;
case 152:return 7
break;
case 153:return 'INVALID'
break;
}
},
rules: [/^(?:(['](\\.|[^']|\\')*?['])+)/i,/^(?:(["](\\.|[^"]|\\")*?["])+)/i,/^(?:--(.*?)($|\r\n|\r|\n))/i,/^(?:\s+)/i,/^(?:ABORT\b)/i,/^(?:ACTION\b)/i,/^(?:ADD\b)/i,/^(?:AFTER\b)/i,/^(?:ALL\b)/i,/^(?:ALTER\b)/i,/^(?:ANALYZE\b)/i,/^(?:AND\b)/i,/^(?:AS\b)/i,/^(?:ASC\b)/i,/^(?:ATTACH\b)/i,/^(?:AUTOINCREMENT\b)/i,/^(?:BEFORE\b)/i,/^(?:BEGIN\b)/i,/^(?:BETWEEN\b)/i,/^(?:BY\b)/i,/^(?:CASCADE\b)/i,/^(?:CASE\b)/i,/^(?:CAST\b)/i,/^(?:CHECK\b)/i,/^(?:COLLATE\b)/i,/^(?:COLUMN\b)/i,/^(?:COMMIT\b)/i,/^(?:CONFLICT\b)/i,/^(?:CONSTRAINT\b)/i,/^(?:CREATE\b)/i,/^(?:CROSS\b)/i,/^(?:CURRENT_DATE\b)/i,/^(?:CURRENT_TIME\b)/i,/^(?:CURRENT_TIMESTAMP\b)/i,/^(?:DATABASE\b)/i,/^(?:DEFAULT\b)/i,/^(?:DEFERRABLE\b)/i,/^(?:DEFERRED\b)/i,/^(?:DELETE\b)/i,/^(?:DESC\b)/i,/^(?:DETACH\b)/i,/^(?:DISTINCT\b)/i,/^(?:DROP\b)/i,/^(?:EACH\b)/i,/^(?:ELSE\b)/i,/^(?:END\b)/i,/^(?:ESCAPE\b)/i,/^(?:EXCEPT\b)/i,/^(?:EXCLUSIVE\b)/i,/^(?:EXISTS\b)/i,/^(?:EXPLAIN\b)/i,/^(?:FAIL\b)/i,/^(?:FOR\b)/i,/^(?:FOREIGN\b)/i,/^(?:FROM\b)/i,/^(?:FULL\b)/i,/^(?:GLOB\b)/i,/^(?:GROUP\b)/i,/^(?:HAVING\b)/i,/^(?:IF\b)/i,/^(?:IGNORE\b)/i,/^(?:IMMEDIATE\b)/i,/^(?:IN\b)/i,/^(?:INDEX\b)/i,/^(?:INDEXED\b)/i,/^(?:INITIALLY\b)/i,/^(?:INNER\b)/i,/^(?:INSERT\b)/i,/^(?:INSTEAD\b)/i,/^(?:INTERSECT\b)/i,/^(?:INTO\b)/i,/^(?:IS\b)/i,/^(?:ISNULL\b)/i,/^(?:JOIN\b)/i,/^(?:KEY\b)/i,/^(?:LEFT\b)/i,/^(?:LIKE\b)/i,/^(?:LIMIT\b)/i,/^(?:MATCH\b)/i,/^(?:NATURAL\b)/i,/^(?:NO\b)/i,/^(?:NOT\b)/i,/^(?:NOTNULL\b)/i,/^(?:NULL\b)/i,/^(?:OF\b)/i,/^(?:OFFSET\b)/i,/^(?:ON\b)/i,/^(?:OR\b)/i,/^(?:ORDER\b)/i,/^(?:OUTER\b)/i,/^(?:PLAN\b)/i,/^(?:PRAGMA\b)/i,/^(?:PRIMARY\b)/i,/^(?:QUERY\b)/i,/^(?:RAISE\b)/i,/^(?:RECURSIVE\b)/i,/^(?:REFERENCES\b)/i,/^(?:REGEXP\b)/i,/^(?:REINDEX\b)/i,/^(?:RELEASE\b)/i,/^(?:RENAME\b)/i,/^(?:REPLACE\b)/i,/^(?:RESTRICT\b)/i,/^(?:RIGHT\b)/i,/^(?:ROLLBACK\b)/i,/^(?:ROW\b)/i,/^(?:SAVEPOINT\b)/i,/^(?:SELECT\b)/i,/^(?:SET\b)/i,/^(?:TABLE\b)/i,/^(?:TEMP\b)/i,/^(?:TEMPORARY\b)/i,/^(?:THEN\b)/i,/^(?:TO\b)/i,/^(?:TRANSACTION\b)/i,/^(?:TRIGGER\b)/i,/^(?:UNION\b)/i,/^(?:UNIQUE\b)/i,/^(?:UPDATE\b)/i,/^(?:USING\b)/i,/^(?:VACUUM\b)/i,/^(?:VALUES\b)/i,/^(?:VIEW\b)/i,/^(?:VIRTUAL\b)/i,/^(?:WHEN\b)/i,/^(?:WHERE\b)/i,/^(?:WITH\b)/i,/^(?:WITHOUT\b)/i,/^(?:(\d*[.])?\d+[eE]\d+)/i,/^(?:(\d*[.])?\d+)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:<>)/i,/^(?:!=)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:=)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\.)/i,/^(?:,)/i,/^(?::)/i,/^(?:;)/i,/^(?:\$)/i,/^(?:\?)/i,/^(?:\^)/i,/^(?:[a-zA-Z_][a-zA-Z_0-9]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}